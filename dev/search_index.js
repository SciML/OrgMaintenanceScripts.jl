var documenterSearchIndex = {"docs":
[{"location":"formatting/#Formatting-Maintenance","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"The OrgMaintenanceScripts package provides automated formatting functionality to maintain consistent code style across SciML repositories using JuliaFormatter.","category":"page"},{"location":"formatting/#Functions","page":"Formatting Maintenance","title":"Functions","text":"","category":"section"},{"location":"formatting/#format_repository","page":"Formatting Maintenance","title":"format_repository","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"Format a single repository with JuliaFormatter.","category":"page"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"format_repository(repo_url::String; \n                 test::Bool = true,\n                 push_to_master::Bool = false,\n                 create_pr::Bool = true,\n                 fork_user::String = \"\",\n                 working_dir::String = mktempdir())","category":"page"},{"location":"formatting/#Arguments","page":"Formatting Maintenance","title":"Arguments","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"repo_url: URL of the repository to format (e.g., \"https://github.com/SciML/Example.jl.git\")\ntest: Whether to run tests after formatting (default: true)\npush_to_master: Whether to push directly to master/main if tests pass (default: false)\ncreate_pr: Whether to create a PR instead of pushing to master (default: true)\nfork_user: GitHub username for creating PRs (required if create_pr=true)\nworking_dir: Directory to clone the repository into (default: temporary directory)","category":"page"},{"location":"formatting/#Returns","page":"Formatting Maintenance","title":"Returns","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"(success::Bool, message::String, pr_url::Union{String,Nothing})","category":"page"},{"location":"formatting/#Example","page":"Formatting Maintenance","title":"Example","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"# Format a repository and create a PR\nsuccess, message, pr_url = format_repository(\n    \"https://github.com/SciML/Example.jl.git\";\n    test = true,\n    create_pr = true,\n    fork_user = \"myusername\"\n)\n\nif success\n    println(\"PR created: $pr_url\")\nelse\n    println(\"Failed: $message\")\nend","category":"page"},{"location":"formatting/#format_org_repositories","page":"Formatting Maintenance","title":"format_org_repositories","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"Format all repositories in a GitHub organization.","category":"page"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"format_org_repositories(org::String = \"SciML\";\n                       test::Bool = true,\n                       push_to_master::Bool = false,\n                       create_pr::Bool = true,\n                       fork_user::String = \"\",\n                       limit::Int = 100,\n                       only_failing_ci::Bool = true,\n                       log_file::String = \"\")","category":"page"},{"location":"formatting/#Arguments-2","page":"Formatting Maintenance","title":"Arguments","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"org: GitHub organization name (default: \"SciML\")\ntest: Whether to run tests after formatting (default: true)\npush_to_master: Whether to push directly to master/main if tests pass (default: false)\ncreate_pr: Whether to create PRs instead of pushing to master (default: true)\nfork_user: GitHub username for creating PRs (required if create_pr=true)\nlimit: Maximum number of repositories to process (default: 100)\nonly_failing_ci: Only process repos with failing formatter CI (default: true)\nlog_file: Path to save results log (default: auto-generated)","category":"page"},{"location":"formatting/#Returns-2","page":"Formatting Maintenance","title":"Returns","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"(successes::Vector{String}, failures::Vector{String}, pr_urls::Vector{String})","category":"page"},{"location":"formatting/#Example-2","page":"Formatting Maintenance","title":"Example","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"# Format all SciML repos with failing formatter CI\nsuccesses, failures, pr_urls = format_org_repositories(\n    \"SciML\";\n    test = false,  # Skip tests for speed\n    create_pr = true,\n    fork_user = \"myusername\",\n    only_failing_ci = true\n)\n\nprintln(\"Successfully formatted: $(length(successes)) repositories\")\nprintln(\"Failed: $(length(failures)) repositories\")\nprintln(\"Created $(length(pr_urls)) pull requests\")","category":"page"},{"location":"formatting/#Usage-Scenarios","page":"Formatting Maintenance","title":"Usage Scenarios","text":"","category":"section"},{"location":"formatting/#1.-Regular-Maintenance-(Recommended)","page":"Formatting Maintenance","title":"1. Regular Maintenance (Recommended)","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"Create PRs for repositories with failing formatter CI:","category":"page"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"using OrgMaintenanceScripts\n\n# Format repos with failing CI and create PRs\nsuccesses, failures, pr_urls = format_org_repositories(\n    \"SciML\";\n    fork_user = \"sciml-bot\",\n    only_failing_ci = true,\n    test = false  # Tests will run in CI\n)","category":"page"},{"location":"formatting/#2.-Direct-Push-to-Master-(Use-with-Caution)","page":"Formatting Maintenance","title":"2. Direct Push to Master (Use with Caution)","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"For trusted automation that pushes directly to master after tests pass:","category":"page"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"# Only push if tests pass\nsuccesses, failures, _ = format_org_repositories(\n    \"SciML\";\n    push_to_master = true,\n    test = true,  # Must pass tests\n    create_pr = false\n)","category":"page"},{"location":"formatting/#3.-Single-Repository","page":"Formatting Maintenance","title":"3. Single Repository","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"Format a specific repository:","category":"page"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"success, message, pr_url = format_repository(\n    \"https://github.com/SciML/DifferentialEquations.jl.git\";\n    fork_user = \"myusername\"\n)","category":"page"},{"location":"formatting/#Prerequisites","page":"Formatting Maintenance","title":"Prerequisites","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"GitHub CLI: The gh command-line tool must be installed and authenticated\nGit: Git must be configured with appropriate credentials\nJulia: Julia 1.6 or higher\nFork Access: If creating PRs, you need fork access to the repositories","category":"page"},{"location":"formatting/#Notes","page":"Formatting Maintenance","title":"Notes","text":"","category":"section"},{"location":"formatting/","page":"Formatting Maintenance","title":"Formatting Maintenance","text":"The formatter uses the SciML style guide by default\nIf a repository doesn't have a .JuliaFormatter.toml file, one will be created\nTests are run with a 10-minute timeout by default\nRate limiting delays are included to avoid GitHub API limits\nAll operations are logged for audit purposes","category":"page"},{"location":"min_version_fixing/#Minimum-Version-Fixing","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"The OrgMaintenanceScripts.jl package provides tools to automatically fix minimum version compatibility bounds for Julia packages. This functionality helps ensure that packages pass the downgrade CI tests by intelligently updating outdated minimum version specifications.","category":"page"},{"location":"min_version_fixing/#Overview","page":"Minimum Version Fixing","title":"Overview","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"The minimum version fixer:","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Uses Stefan Karpinski's Resolver.jl to test if minimum versions can be resolved\nIdentifies packages with problematic minimum versions through resolver errors\nIntelligently bumps versions using multiple strategies\nCreates pull requests with the fixes automatically","category":"page"},{"location":"min_version_fixing/#Functions","page":"Minimum Version Fixing","title":"Functions","text":"","category":"section"},{"location":"min_version_fixing/#fix_package_min_versions","page":"Minimum Version Fixing","title":"fix_package_min_versions","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Fix minimum versions for a package that's already cloned locally.","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"fix_package_min_versions(repo_path::String; \n                        max_iterations::Int=10,\n                        work_dir::String=mktempdir(),\n                        julia_version::String=\"1.10\")","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Parameters:","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"repo_path: Path to the cloned repository\nmax_iterations: Maximum number of fix iterations (default: 10)\nwork_dir: Working directory for temporary files\njulia_version: Julia version for compatibility testing (default: \"1.10\")","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Returns: (success::Bool, updates::Dict{String,String})","category":"page"},{"location":"min_version_fixing/#fix_repo_min_versions","page":"Minimum Version Fixing","title":"fix_repo_min_versions","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Clone a repository, fix its minimum versions, and optionally create a PR.","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"fix_repo_min_versions(repo_name::String;\n                     work_dir::String=mktempdir(),\n                     max_iterations::Int=10,\n                     create_pr::Bool=true,\n                     julia_version::String=\"1.10\")","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Parameters:","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"repo_name: GitHub repository name (e.g., \"SciML/OrdinaryDiffEq.jl\")\nwork_dir: Working directory for cloning and temporary files\nmax_iterations: Maximum number of fix iterations\ncreate_pr: Whether to create a pull request (default: true)\njulia_version: Julia version for compatibility testing","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Returns: success::Bool","category":"page"},{"location":"min_version_fixing/#fix_org_min_versions","page":"Minimum Version Fixing","title":"fix_org_min_versions","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Fix minimum versions for all Julia packages in a GitHub organization.","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"fix_org_min_versions(org_name::String;\n                    work_dir::String=mktempdir(),\n                    max_iterations::Int=10,\n                    create_prs::Bool=true,\n                    skip_repos::Vector{String}=String[],\n                    only_repos::Union{Nothing,Vector{String}}=nothing,\n                    julia_version::String=\"1.10\")","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Parameters:","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"org_name: GitHub organization name (e.g., \"SciML\")\nwork_dir: Working directory\nmax_iterations: Maximum iterations per repository\ncreate_prs: Whether to create pull requests\nskip_repos: Repository names to skip\nonly_repos: If specified, only process these repositories\njulia_version: Julia version for compatibility testing","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Returns: results::Dict{String,Bool} mapping repository names to success status","category":"page"},{"location":"min_version_fixing/#Usage-Examples","page":"Minimum Version Fixing","title":"Usage Examples","text":"","category":"section"},{"location":"min_version_fixing/#Fix-a-Single-Package","page":"Minimum Version Fixing","title":"Fix a Single Package","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"using OrgMaintenanceScripts\n\n# Fix a repository by name (clones automatically)\nfix_repo_min_versions(\"SciML/OrdinaryDiffEq.jl\")\n\n# Fix without creating a PR\nfix_repo_min_versions(\"SciML/DiffEqBase.jl\"; create_pr=false)\n\n# Fix an already cloned repository\nsuccess, updates = fix_package_min_versions(\"/path/to/cloned/repo\")","category":"page"},{"location":"min_version_fixing/#Fix-an-Entire-Organization","page":"Minimum Version Fixing","title":"Fix an Entire Organization","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"# Fix all Julia packages in the SciML organization\nresults = fix_org_min_versions(\"SciML\")\n\n# Skip certain repositories\nresults = fix_org_min_versions(\"SciML\"; skip_repos=[\"SciMLDocs\", \"SciMLBenchmarks.jl\"])\n\n# Only process specific repositories\nresults = fix_org_min_versions(\"SciML\"; only_repos=[\"OrdinaryDiffEq.jl\", \"DiffEqBase.jl\"])\n\n# Don't create PRs (useful for testing)\nresults = fix_org_min_versions(\"SciML\"; create_prs=false)","category":"page"},{"location":"min_version_fixing/#Version-Bumping-Strategy","page":"Minimum Version Fixing","title":"Version Bumping Strategy","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"The tool uses multiple strategies to determine appropriate minimum versions:","category":"page"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Registry Lookup: Queries the General registry for the latest compatible version\nConservative Bumping:\nFor 0.x packages: Uses the latest 0.x version\nFor stable packages (≥1.0): Uses major.0.0\nPreserves existing upper bounds in all compat entries\nFallback Strategy: If registry lookup fails, conservatively bumps the current version","category":"page"},{"location":"min_version_fixing/#Requirements","page":"Minimum Version Fixing","title":"Requirements","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Julia 1.6+\nGit\nGitHub CLI (gh) for automatic PR creation\nAuthenticated with GitHub (gh auth login)","category":"page"},{"location":"min_version_fixing/#How-It-Works","page":"Minimum Version Fixing","title":"How It Works","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"Clone Repository: Clones the target repository (if needed)\nCreate Branch: Creates a feature branch for the fixes\nTest Resolution: Uses Resolver.jl with --min=@alldeps to test if minimum versions resolve\nIdentify Issues: Parses resolver errors to find problematic packages\nApply Fixes: Intelligently bumps failing minimum versions\nIterate: Repeats until all packages resolve\nCreate PR: Commits changes and creates a detailed pull request","category":"page"},{"location":"min_version_fixing/#Example-Output","page":"Minimum Version Fixing","title":"Example Output","text":"","category":"section"},{"location":"min_version_fixing/","page":"Minimum Version Fixing","title":"Minimum Version Fixing","text":"[ Info: Fixing minimum versions for OrdinaryDiffEq\n[ Info: Iteration 1/10\n[ Info: Resolution failed, analyzing...\n[ Info: Found problematic packages: RecursiveArrayTools, StaticArrays\n[ Info: Updated RecursiveArrayTools: 2.0 → 3.0\n[ Info: Updated StaticArrays: 0.12 → 1.0\n[ Info: Iteration 2/10\n[ Info: ✓ Minimum versions resolved successfully!\n[ Info: Creating pull request...\n[ Info: ✓ Pull request created successfully!","category":"page"},{"location":"version_bumping/#Version-Bumping-and-Registration","page":"Version Bumping","title":"Version Bumping and Registration","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"The OrgMaintenanceScripts.jl package provides tools for automatically bumping minor versions and registering Julia packages. This functionality helps maintain consistent versioning across packages and simplifies the release process.","category":"page"},{"location":"version_bumping/#Overview","page":"Version Bumping","title":"Overview","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"The version bumping and registration tools:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Automatically increment minor version numbers in Project.toml files\nHandle main packages and subpackages in lib/ directories\nCreate git commits for version changes\nRegister packages to Julia registries (placeholder functionality)\nProcess entire GitHub organizations at once","category":"page"},{"location":"version_bumping/#Functions","page":"Version Bumping","title":"Functions","text":"","category":"section"},{"location":"version_bumping/#bump_minor_version","page":"Version Bumping","title":"bump_minor_version","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Bump the minor version of a semantic version string.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"bump_minor_version(version_str::String) -> String","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"version_str: A semantic version string (e.g., \"1.2.3\")","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: New version string with incremented minor version (e.g., \"1.3.0\")","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Example:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"new_version = bump_minor_version(\"1.2.3\")  # Returns \"1.3.0\"\nnew_version = bump_minor_version(\"0.5.0\")  # Returns \"0.6.0\"","category":"page"},{"location":"version_bumping/#update_project_version","page":"Version Bumping","title":"update_project_version","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Update the version in a Project.toml file by bumping the minor version.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"update_project_version(project_path::String)","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"project_path: Path to the Project.toml file","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: Tuple (old_version, new_version) or nothing if no version field exists","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Example:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"result = update_project_version(\"path/to/Project.toml\")\nif !isnothing(result)\n    old_ver, new_ver = result\n    println(\"Updated: $old_ver → $new_ver\")\nend","category":"page"},{"location":"version_bumping/#register_package","page":"Version Bumping","title":"register_package","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Register a Julia package to the specified registry.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"register_package(package_dir::String; registry_url=\"https://github.com/JuliaRegistries/General\")","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"package_dir: Directory containing the package to register\nregistry_url: URL of the target registry (default: General registry)","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: true on success","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"note: Note\nThis is currently a placeholder function. In practice, it would use LocalRegistry.jl or similar tools for actual registration.","category":"page"},{"location":"version_bumping/#bump_and_register_repo","page":"Version Bumping","title":"bump_and_register_repo","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Bump minor versions and register all packages in a repository.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"bump_and_register_repo(repo_path::String; registry_url=\"https://github.com/JuliaRegistries/General\")","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"repo_path: Path to the repository\nregistry_url: URL of the target registry","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: Named tuple (registered=String[], failed=String[])","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"This function:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Updates the main Project.toml (if exists)\nUpdates all lib/*/Project.toml files\nAttempts to register each package\nCommits version changes to git","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Example:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"result = bump_and_register_repo(\"/path/to/MyPackage.jl\")\nprintln(\"Successfully registered: \", result.registered)\nprintln(\"Failed to register: \", result.failed)","category":"page"},{"location":"version_bumping/#get_org_repos","page":"Version Bumping","title":"get_org_repos","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Get all repositories for a GitHub organization.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"get_org_repos(org::String; auth_token::String=\"\")","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"org: GitHub organization name\nauth_token: GitHub authentication token (optional but recommended)","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: Vector of repository full names (e.g., \"SciML/OrdinaryDiffEq.jl\")","category":"page"},{"location":"version_bumping/#bump_and_register_org","page":"Version Bumping","title":"bump_and_register_org","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Bump minor versions and register all packages in all repositories of a GitHub organization.","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"bump_and_register_org(org::String; \n                     registry_url=\"https://github.com/JuliaRegistries/General\",\n                     auth_token::String=\"\",\n                     work_dir::String=mktempdir())","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Parameters:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"org: GitHub organization name\nregistry_url: URL of the target registry\nauth_token: GitHub authentication token\nwork_dir: Working directory for cloning repositories","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Returns: Dictionary mapping repository names to results","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Example:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"results = bump_and_register_org(\"SciML\"; auth_token=ENV[\"GITHUB_TOKEN\"])\n\nfor (repo, result) in results\n    println(\"$repo:\")\n    println(\"  Registered: \", result.registered)\n    println(\"  Failed: \", result.failed)\nend","category":"page"},{"location":"version_bumping/#Usage-Examples","page":"Version Bumping","title":"Usage Examples","text":"","category":"section"},{"location":"version_bumping/#Bump-Version-for-a-Single-Package","page":"Version Bumping","title":"Bump Version for a Single Package","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"using OrgMaintenanceScripts\n\n# Update version in Project.toml\nold_ver, new_ver = update_project_version(\"MyPackage/Project.toml\")\nprintln(\"Version bumped: $old_ver → $new_ver\")","category":"page"},{"location":"version_bumping/#Process-a-Repository-with-Subpackages","page":"Version Bumping","title":"Process a Repository with Subpackages","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"# Bump versions and register all packages in a repository\nresult = bump_and_register_repo(\"/path/to/ComplexPackage.jl\")\n\nprintln(\"Main package and $(length(result.registered)-1) subpackages processed\")","category":"page"},{"location":"version_bumping/#Process-an-Entire-Organization","page":"Version Bumping","title":"Process an Entire Organization","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"# Set up authentication\nauth_token = ENV[\"GITHUB_TOKEN\"]\n\n# Process all repositories in the SciML organization\nresults = bump_and_register_org(\"SciML\"; auth_token=auth_token)\n\n# Generate summary report\ntotal_registered = sum(length(r.registered) for r in values(results))\ntotal_failed = sum(length(r.failed) for r in values(results))\n\nprintln(\"Organization Summary:\")\nprintln(\"  Total packages registered: $total_registered\")\nprintln(\"  Total failures: $total_failed\")","category":"page"},{"location":"version_bumping/#Workflow-Integration","page":"Version Bumping","title":"Workflow Integration","text":"","category":"section"},{"location":"version_bumping/#Automated-Release-Process","page":"Version Bumping","title":"Automated Release Process","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Version Bumping: Automatically increment minor versions\nGit Commit: Create commits with descriptive messages\nRegistration: Register to Julia registries\nPush Changes: Push version bumps to remote","category":"page"},{"location":"version_bumping/#CI/CD-Integration","page":"Version Bumping","title":"CI/CD Integration","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"The tools can be integrated into CI/CD pipelines:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"# Example GitHub Action\n- name: Bump and Register\n  run: |\n    julia -e 'using OrgMaintenanceScripts; \n             bump_and_register_repo(\".\")'","category":"page"},{"location":"version_bumping/#Error-Handling","page":"Version Bumping","title":"Error Handling","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"The functions include comprehensive error handling:","category":"page"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Missing Project.toml files generate warnings\nRegistration failures are captured and reported\nGit operations are wrapped in try-catch blocks\nEach repository in organization processing is isolated","category":"page"},{"location":"version_bumping/#Best-Practices","page":"Version Bumping","title":"Best Practices","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Authentication: Always use GitHub tokens for organization operations\nTesting: Test version bumping on a single package first\nBackup: The tools create git commits, ensuring changes can be reverted\nReview: Check the results before pushing to remote repositories","category":"page"},{"location":"version_bumping/#Limitations","page":"Version Bumping","title":"Limitations","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Currently only bumps minor versions (not major or patch)\nRegistration is a placeholder (requires LocalRegistry.jl integration)\nAssumes semantic versioning (MAJOR.MINOR.PATCH)\nRequires git to be configured with appropriate credentials","category":"page"},{"location":"version_bumping/#API-Summary","page":"Version Bumping","title":"API Summary","text":"","category":"section"},{"location":"version_bumping/","page":"Version Bumping","title":"Version Bumping","text":"Function Description\nbump_minor_version(version_str) Increment minor version number\nupdate_project_version(project_path) Update version in Project.toml\nregister_package(package_dir; registry_url) Register package (placeholder)\nbump_and_register_repo(repo_path; registry_url) Process entire repository\nget_org_repos(org; auth_token) List organization repositories\nbump_and_register_org(org; kwargs...) Process entire organization","category":"page"},{"location":"#OrgMaintenanceScripts.jl","page":"Home","title":"OrgMaintenanceScripts.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OrgMaintenanceScripts.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides maintenance scripts for SciML organization repositories, including:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Code Formatting: Automated formatting with JuliaFormatter across entire organizations\nVersion Bumping: Automatically bump minor versions in Project.toml files\nPackage Registration: Register packages to Julia registries\nMinimum Version Fixing: Fix minimum version compatibility bounds to pass downgrade CI tests\nOrganization-wide Operations: Process entire organizations at once","category":"page"},{"location":"#Usage-Examples","page":"Home","title":"Usage Examples","text":"","category":"section"},{"location":"#Code-Formatting","page":"Home","title":"Code Formatting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OrgMaintenanceScripts\n\n# Format a single repository\nsuccess, message, pr_url = format_repository(\n    \"https://github.com/SciML/Example.jl.git\";\n    fork_user = \"myusername\"\n)\n\n# Format all repos with failing CI\nsuccesses, failures, pr_urls = format_org_repositories(\n    \"SciML\";\n    fork_user = \"myusername\",\n    only_failing_ci = true\n)","category":"page"},{"location":"#Version-Bumping-and-Registration","page":"Home","title":"Version Bumping and Registration","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OrgMaintenanceScripts\n\n# Bump minor versions and register all packages in a repository\nresult = bump_and_register_repo(\"/path/to/repo\")\n\nprintln(\"Registered packages: \", result.registered)\nprintln(\"Failed packages: \", result.failed)\n\n# Process all repositories in the SciML organization\nresults = bump_and_register_org(\"SciML\"; auth_token=\"your_github_token\")\n\nfor (repo, result) in results\n    println(\"$repo:\")\n    println(\"  Registered: \", result.registered)\n    println(\"  Failed: \", result.failed)\nend","category":"page"},{"location":"#Minimum-Version-Fixing","page":"Home","title":"Minimum Version Fixing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using OrgMaintenanceScripts\n\n# Fix minimum versions for a single repository\nsuccess = fix_repo_min_versions(\"SciML/OrdinaryDiffEq.jl\")\n\n# Fix all repositories in an organization\nresults = fix_org_min_versions(\"SciML\")\n\n# Process only specific repositories\nresults = fix_org_min_versions(\"SciML\"; only_repos=[\"OrdinaryDiffEq.jl\", \"DiffEqBase.jl\"])","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"formatting.md\", \"version_bumping.md\", \"min_version_fixing.md\"]\nDepth = 2","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#OrgMaintenanceScripts.bump_and_register_org-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.bump_and_register_org","text":"bump_and_register_org(org::String; \n                     registry_url=\"https://github.com/JuliaRegistries/General\",\n                     auth_token::String=\"\",\n                     work_dir::String=mktempdir())\n\nBump minor versions and register all packages in all repositories of a GitHub organization.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.bump_and_register_repo-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.bump_and_register_repo","text":"bump_and_register_repo(repo_path::String; registry_url=\"https://github.com/JuliaRegistries/General\")\n\nBump minor versions and register all packages in a repository. This handles the main Project.toml and all lib/*/Project.toml files.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.bump_compat_version-Tuple{String, String}","page":"Home","title":"OrgMaintenanceScripts.bump_compat_version","text":"bump_compat_version(compat_str::String, pkg_name::String)\n\nBump a compat version string conservatively, ensuring we don't go above the current release.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.bump_minor_version-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.bump_minor_version","text":"bump_minor_version(version_str::String) -> String\n\nBump the minor version of a semantic version string.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.downgrade_to_minimum_versions-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.downgrade_to_minimum_versions","text":"downgrade_to_minimum_versions(project_dir::String; julia_version=\"1.10\", mode=\"alldeps\", work_dir=mktempdir())\n\nDowngrade all dependencies to their minimum compatible versions using Resolver.jl. This uses the same approach as julia-actions/julia-downgrade-compat. Returns (success::Bool, output::String)\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.ensure_juliaformatter-Tuple{}","page":"Home","title":"OrgMaintenanceScripts.ensure_juliaformatter","text":"ensure_juliaformatter()\n\nEnsure JuliaFormatter is available in the current environment.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.extract_min_version_from_compat-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.extract_min_version_from_compat","text":"extract_min_version_from_compat(compat_str::String)\n\nExtract the minimum version from a compat string.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.fix_org_min_versions-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.fix_org_min_versions","text":"fix_org_min_versions(org_name::String;\n                    work_dir=mktempdir(),\n                    max_iterations=10,\n                    create_prs=true,\n                    skip_repos=String[],\n                    only_repos=nothing,\n                    julia_version=\"1.10\")\n\nFix minimum versions for all Julia packages in a GitHub organization.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.fix_package_min_versions-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.fix_package_min_versions","text":"fix_package_min_versions(repo_path::String; \n                        max_iterations=10, \n                        work_dir=mktempdir(),\n                        julia_version=\"1.10\")\n\nFix minimum versions for a package repository that's already cloned. Returns (success::Bool, updates::Dict{String,String})\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.fix_repo_min_versions-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.fix_repo_min_versions","text":"fix_repo_min_versions(repo_name::String;\n                     work_dir=mktempdir(),\n                     max_iterations=10,\n                     create_pr=true,\n                     julia_version=\"1.10\")\n\nClone a repository, fix its minimum versions, and optionally create a PR.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.format_org_repositories","page":"Home","title":"OrgMaintenanceScripts.format_org_repositories","text":"format_org_repositories(org::String = \"SciML\";\n                       test::Bool = true,\n                       push_to_master::Bool = false,\n                       create_pr::Bool = true,\n                       fork_user::String = \"\",\n                       limit::Int = 100,\n                       only_failing_ci::Bool = true,\n                       log_file::String = \"\")\n\nFormat all repositories in a GitHub organization.\n\nArguments\n\norg: GitHub organization name (default: \"SciML\")\ntest: Whether to run tests after formatting (default: true)\npush_to_master: Whether to push directly to master/main if tests pass (default: false)\ncreate_pr: Whether to create PRs instead of pushing to master (default: true)\nfork_user: GitHub username for creating PRs (required if create_pr=true)\nlimit: Maximum number of repositories to process (default: 100)\nonly_failing_ci: Only process repos with failing formatter CI (default: true)\nlog_file: Path to save results log (default: auto-generated)\n\nReturns\n\n(successes::Vector{String}, failures::Vector{String}, pr_urls::Vector{String})\n\n\n\n\n\n","category":"function"},{"location":"#OrgMaintenanceScripts.format_repository-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.format_repository","text":"format_repository(repo_url::String; \n                 test::Bool = true,\n                 push_to_master::Bool = false,\n                 create_pr::Bool = true,\n                 fork_user::String = \"\",\n                 working_dir::String = mktempdir())\n\nFormat a single repository with JuliaFormatter.\n\nArguments\n\nrepo_url: URL of the repository to format (e.g., \"https://github.com/SciML/Example.jl.git\")\ntest: Whether to run tests after formatting (default: true)\npush_to_master: Whether to push directly to master/main if tests pass (default: false)\ncreate_pr: Whether to create a PR instead of pushing to master (default: true)\nfork_user: GitHub username for creating PRs (required if create_pr=true)\nworking_dir: Directory to clone the repository into (default: temporary directory)\n\nReturns\n\n(success::Bool, message::String, pr_url::Union{String,Nothing})\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.get_latest_version-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.get_latest_version","text":"get_latest_version(pkg_name::String)\n\nGet the latest version of a package from the registry.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.get_org_repos-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.get_org_repos","text":"get_org_repos(org::String; auth_token::String=\"\")\n\nGet all repositories for a GitHub organization.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.get_org_repositories","page":"Home","title":"OrgMaintenanceScripts.get_org_repositories","text":"get_org_repositories(org::String, limit::Int = 100)\n\nGet all Julia repositories from a GitHub organization.\n\n\n\n\n\n","category":"function"},{"location":"#OrgMaintenanceScripts.get_smart_min_version-Tuple{String, String}","page":"Home","title":"OrgMaintenanceScripts.get_smart_min_version","text":"get_smart_min_version(pkg_name::String, current_compat::String)\n\nGet an appropriate minimum version for a package.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.has_failing_formatter_ci-Tuple{String, String}","page":"Home","title":"OrgMaintenanceScripts.has_failing_formatter_ci","text":"has_failing_formatter_ci(org::String, repo::String)\n\nCheck if a repository has failing formatter CI.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.is_outdated_compat-Tuple{String, String}","page":"Home","title":"OrgMaintenanceScripts.is_outdated_compat","text":"is_outdated_compat(compat_str::String, pkg_name::String)\n\nCheck if a compat string indicates an outdated version by comparing to the latest release.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.parse_resolution_errors-Tuple{String, Dict}","page":"Home","title":"OrgMaintenanceScripts.parse_resolution_errors","text":"parse_resolution_errors(output::String, project_toml::Dict)\n\nParse resolution errors to identify problematic packages.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.register_package-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.register_package","text":"register_package(package_dir::String; registry_url=\"https://github.com/JuliaRegistries/General\")\n\nRegister a Julia package to the specified registry.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.run_tests-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.run_tests","text":"run_tests(repo_path::String; timeout_minutes::Int = 10)\n\nRun tests for a Julia package.\n\nReturns\n\ntrue if tests pass, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.setup_resolver-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.setup_resolver","text":"setup_resolver(work_dir::String)\n\nClone and setup Resolver.jl if not already present. Returns the path to Resolver.jl.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.test_min_versions-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.test_min_versions","text":"test_min_versions(project_dir::String; julia_version=\"1.10\", mode=\"alldeps\", work_dir=mktempdir())\n\nTest if minimum versions can be resolved using Resolver.jl. Returns (success::Bool, error_output::String)\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.update_compat!-Tuple{Dict, Dict{String, String}}","page":"Home","title":"OrgMaintenanceScripts.update_compat!","text":"update_compat!(project_toml::Dict, updates::Dict{String, String})\n\nUpdate the compat section preserving upper bounds.\n\n\n\n\n\n","category":"method"},{"location":"#OrgMaintenanceScripts.update_project_version-Tuple{String}","page":"Home","title":"OrgMaintenanceScripts.update_project_version","text":"update_project_version(project_path::String)\n\nUpdate the version in a Project.toml file by bumping the minor version.\n\n\n\n\n\n","category":"method"}]
}
